import { defineStore } from "pinia"

// Import FR
import { footerTextsFr } from "../variables/components/fr/footer"
import { navbarTextsFr } from "../variables/components/fr/navbar"
import { daoTextsFr } from "../variables/pages/fr/dao"
import { homeTextsFr } from "../variables/pages/fr/home"
import { loginTextsFr } from "../variables/pages/fr/login"
import { stakingTextsFr } from "../variables/pages/fr/staking"

// Import EN
import { footerTextsEn } from "../variables/components/en/footer"
import { navbarTextsEn } from "../variables/components/en/navbar"
import { daoTextsEn } from "../variables/pages/en/dao"
import { homeTextsEn } from "../variables/pages/en/home"
import { loginTextsEn } from "../variables/pages/en/login"
import { stakingTextsEn } from "../variables/pages/en/staking"

export const useWorkStore = defineStore("work", {
  state: () => ({
    lang: "fr" as "fr" | "en",
    texts: {
      footer: footerTextsFr,
      navbar: navbarTextsFr,
      dao: daoTextsFr,
      home: homeTextsFr,
      login: loginTextsFr,
      staking: stakingTextsFr,
    },
  }),

  actions: {
    switchLang(lang: "fr" | "en") {
      this.lang = lang
      if (lang === "en") {
        this.texts = {
          footer: footerTextsEn,
          navbar: navbarTextsEn,
          dao: daoTextsEn,
          home: homeTextsEn,
          login: loginTextsEn,
          staking: stakingTextsEn,
        }
      } else {
        this.texts = {
          footer: footerTextsFr,
          navbar: navbarTextsFr,
          dao: daoTextsFr,
          home: homeTextsFr,
          login: loginTextsFr,
          staking: stakingTextsFr,
        }
      }
    },

    // üß† Fonction intelligente locale
    askR2D2(question: string): string {
      const q = question.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
      const allTexts = JSON.stringify(this.texts).toLowerCase()

      // Liste de mots-cl√©s √† surveiller
      const topics: Record<string, string> = {
        staking: "Le staking permet de s√©curiser le r√©seau et d'obtenir des r√©compenses annuelles de 5% en $WORK.",
        gouvernance: "La gouvernance du WorkDAO repose sur la transparence et les votes on-chain.",
        dao: "Le WorkDAO est une organisation d√©centralis√©e qui g√®re l'√©cosyst√®me freelance de mani√®re autonome.",
        recompense: "Les r√©compenses sont distribu√©es en tokens $WORK et en stablecoins pour les arbitres actifs.",
        vote: "Chaque membre peut voter sur les propositions selon son staking ou son token Soulbound.",
        arbitre: "Les arbitres sont s√©lectionn√©s al√©atoirement pour r√©soudre les litiges via un vote v√©rifiable on-chain.",
        fiable: "Le WorkDAO est audit√© r√©guli√®rement et toutes les d√©cisions sont enregistr√©es on-chain, assurant une transparence totale.",
        securite: "La s√©curit√© du WorkDAO repose sur des smart contracts audit√©s et un m√©canisme d‚Äôarbitrage d√©centralis√©.",
        membre: "Tout utilisateur v√©rifi√© peut devenir membre en poss√©dant un token Soulbound ou au moins 100 $WORK.",
        token: "Le token $WORK est utilis√© pour voter, participer √† la gouvernance et recevoir des r√©compenses.",
      }

      // 1Ô∏è‚É£ V√©rifie si un mot-cl√© correspond √† une r√©ponse connue
      for (const [keyword, answer] of Object.entries(topics)) {
        if (q.includes(keyword)) return answer
      }

      // 2Ô∏è‚É£ Sinon, essaie de trouver une phrase du texte contenant les mots de la question
      const words = q.split(" ").filter((w) => w.length > 3)
      const match = words.find((w) => allTexts.includes(w))
      if (match) {
        // Extrait un bout de texte proche du mot trouv√©
        const index = allTexts.indexOf(match)
        const snippet = allTexts.slice(Math.max(0, index - 100), index + 200)
        return (
          "Voici ce que j‚Äôai trouv√© dans la documentation WorkDAO : <br><br>" +
          snippet.replace(/["{}[\],]/g, " ").slice(0, 400) +
          "..."
        )
      }

      // 3Ô∏è‚É£ Si rien n‚Äôest trouv√©
      return (
        "Je n‚Äôai pas trouv√© cette information dans la documentation WorkDAO üßê<br>" +
        "Essayez de reformuler votre question avec des mots comme <b>staking</b>, <b>DAO</b>, <b>vote</b> ou <b>r√©compense</b>."
      )
    },
  },
})
